clc;
clear all;
close all;

while(1)
    ch=menu(' SEGMENTATION OF POIKILOCYTOSIS','Input image','Image preprocessing','Morphological operation','Result','Counting','classification','Exit');
    if(ch==1)
        show_images=1;
[a b]=uigetfile('*.*');
input_image=strcat(b,a);
a1=imread(input_image);
% if show_images == 1, 
    figure;imshow(a1);
    title('Input image'); 
% end
    end
    if ch==2
        a=rgb2gray(a1);
% a=a1(:,:, 2);   % only the Green componant
if show_images == 1, figure;imshow(a);title('Input image in gray scale'); end
%% Adjust image intensity values with a linear contrast stretching 
L=imadjust(a);
if show_images == 1, figure;imshow(L);title('L: Input image with intensity values adjusted by a linear contrast stretching'); end
%% Enhance contrast using histogram equalization 
H = histeq(a);
if show_images == 1, figure;imshow(H);title('H: Enhance contrast using histogram equalization'); end
%% Brighten most of the details in the image except the nucleus
R1=imadd(L,H);
if show_images == 1, figure;imshow(R1);title('R1: Brighten most of the details in the image except the RBC'); end
%% Highlight all the objects and its borders in the image including the cell nucleus
R2 = imsubtract(R1,H);
if show_images == 1, figure;imshow(R2);title('R2: Highlight all the objects and its borders in the image including the cell nucleus'); end
%% Remove almost all the other blood components while retaining the nucleus with minimum affect of distortion on the nucleus part of the white blood cell.
R3=imadd(R1,R2)
if show_images == 1,
    figure;
    imshow(R3);
    title('R3: Remove almost all the other blood components while retaining the nucleus with minimum affect of distortion on the nucleus part of the Red blood cell.');
end
% 'Time elapsed to calculate image preparations (algorithm)' 
% toc(programStart)
filterStart=tic;
%=====================
%implements a 3-by-3 minimum filter
%reduce noise, preserve edges and increase the darkness of the nuclei
for i=1:3
    R3=ordfilt2(R3,1,ones(3,3));
end
%% Global threshold using Otsu’s method 
level=graythresh(R3);
bw=im2bw(R3,level);
%Complement image
%bw = imcomplement(bw);
if show_images == 1, 
    figure;imshow(bw);
    title('Global threshold using Otsu’s method '); 
end
    end
    if(ch==3)
        %% Use morphological closing to remove small pixel objects
filterStart=tic;
d= strel('disk',9);
bw=imopen(bw,d);
if show_images == 1, figure;imshow(bw);title('After morphological opening'); end
%=================================================
%% Remove objects that is not WBCs "check by area"
%Compute Area of Each Cell
%count objects in the image
cells = bwconncomp(bw);
no_of_RBCs=cells.NumObjects;
cellsdata = regionprops(cells, 'basic');
%Compute Area-based Statistics
cells_areas = [cellsdata.Area];
%check the areas area of each segment, must be > 0.5 RBC avarage size (10000)
for k=1:no_of_RBCs
    if (cells_areas(k)<2000) %|| (cells_areas(k)>30000) %(ratio < 0.6)  %     35% is the size ratio of the smallest WBC to the largest one
        bw(cells.PixelIdxList{k})=0;
        
    end
end
if show_images == 1, 
    figure;imshow(bw);
    title('After minimum area check and remove false objects'); 
end
    end
    if(ch==4)
        %% Show resulting images
out_mask = bw;
if show_images == 1
    %Re-count objects in the image
    cells = bwconncomp(bw);
    no_of_RBCs=cells.NumObjects;    
    a2 = a1;
    for j=1:no_of_RBCs
        %return the coordinates for the pixels in object j
        [r, c] = find(bwlabel(bw)==j);
        rc = [r c];
        %marking the location of the nuclei of white blood cells by a white
        %colour
        for i=1:max(size(rc))
            a2(rc(i,1),rc(i,2),:)=uint8(a1(rc(i,1),rc(i,2),:)*1.5);
        end
    end
    h = figure;
    set(h, 'Name', 'RBC segmentation results','NumberTitle','off', 'OuterPosition',[1 1 1600 600]);
    subplot(1,3,1);imshow(a1);
    [~, name ext] = fileparts(input_image);
     title(['The original image [' name ext ']']);

    subplot(1,3,2);imshow(a2);
    title('The original image with the white spot(s) over the WBC nucleus(ei)');
    %show the final segmented image
    bw1 = imcomplement(bw);
    amask = a;
    amask(bw1) = 255;
    subplot(1,3,3);imshow(amask);
    title('The final segmented image');  
end
    end

if(ch==5)
    aa=bwboundaries(bw,'noholes');
    figure
    imshow(a1)
    hold on
     for k=1:length(aa) 
           boundary = aa{k};
           plot(boundary(:,2), boundary(:,1),'r','LineWidth',5);
     end   
   
text(200,10,strcat('\color{red}Objects Found:',num2str(length(aa))));
end
   % Auto-generated by colorThresholder app on 10-Feb-2017
%-------------------------------------------------------
if(ch==6)

% Convert RGB image to chosen color space
RGB=a1;
imtool(RGB);
RGB = im2double(RGB);
cform = makecform('srgb2lab', 'AdaptedWhitePoint', whitepoint('D65'));
I = applycform(RGB,cform);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 42.435;
channel1Max = 74.755;

% Define thresholds for channel 2 based on histogram settings
channel2Min = -7.888;
channel2Max = 50.492;

% Define thresholds for channel 3 based on histogram settings
channel3Min = -68.182;
channel3Max = -32.919;

% Create mask based on chosen histogram thresholds
BW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);

% Initialize output masked image based on input image.
maskedRGBImage = RGB;
 
% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;
figure
imshow(maskedRGBImage)
J=im2bw(maskedRGBImage);
J=~J;
H1=rgb2gray(maskedRGBImage);
E1=edge(J,'canny');


cc3=bwconncomp(E1,4);
y2=cc3.NumObjects;


aa=rgb2gray(maskedRGBImage);
bb=graycomatrix(aa,'offset',[0 1]);
cc=graycoprops(bb,'all');

x=cc.Energy(1);

y=cc.Homogeneity;
if ((x>=0.932 && y>=0.99 && (y2==63 || y2==56 || y2==57 || y2==128)))
    msgbox('Acanthocytes');
elseif (x>=0.86 && y>=0.99 && (y2==156 || y2==349 || y2==111 || y2==124))
     msgbox('Codocytes');
elseif (x>=0.943 && y>=0.99 &&(y2==100 || y2==171 || y2==85 || y2==183))
    msgbox('Echinocytes')
elseif(x>=0.919 && y>=0.99 && (y2==78 || y2==53 ||y2==146 ||y2==73 || y2==58 ))
    msgbox('Elliptocytes ');
elseif(x>=0.91 && y>=0.99 &&(y2==290 || y2==232 || y2==210 ||y2==250))
    msgbox('Spherocytes');
end
    
end

if(ch==7)
       close all 
        break;
    end
end